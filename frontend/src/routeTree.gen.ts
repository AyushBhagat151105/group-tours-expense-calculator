/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PanalRouteImport } from './routes/panal'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authSignUpRouteImport } from './routes/(auth)/SignUp'
import { Route as authLoginRouteImport } from './routes/(auth)/Login'
import { Route as authGoogleSuccessRouteImport } from './routes/(auth)/GoogleSuccess'
import { Route as TripIdIndexRouteImport } from './routes/trip/$id/index'

const PanalRoute = PanalRouteImport.update({
  id: '/panal',
  path: '/panal',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/SignUp',
  path: '/SignUp',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/Login',
  path: '/Login',
  getParentRoute: () => rootRouteImport,
} as any)
const authGoogleSuccessRoute = authGoogleSuccessRouteImport.update({
  id: '/(auth)/GoogleSuccess',
  path: '/GoogleSuccess',
  getParentRoute: () => rootRouteImport,
} as any)
const TripIdIndexRoute = TripIdIndexRouteImport.update({
  id: '/trip/$id/',
  path: '/trip/$id/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/panal': typeof PanalRoute
  '/GoogleSuccess': typeof authGoogleSuccessRoute
  '/Login': typeof authLoginRoute
  '/SignUp': typeof authSignUpRoute
  '/trip/$id': typeof TripIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/panal': typeof PanalRoute
  '/GoogleSuccess': typeof authGoogleSuccessRoute
  '/Login': typeof authLoginRoute
  '/SignUp': typeof authSignUpRoute
  '/trip/$id': typeof TripIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/panal': typeof PanalRoute
  '/(auth)/GoogleSuccess': typeof authGoogleSuccessRoute
  '/(auth)/Login': typeof authLoginRoute
  '/(auth)/SignUp': typeof authSignUpRoute
  '/trip/$id/': typeof TripIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/panal'
    | '/GoogleSuccess'
    | '/Login'
    | '/SignUp'
    | '/trip/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/panal' | '/GoogleSuccess' | '/Login' | '/SignUp' | '/trip/$id'
  id:
    | '__root__'
    | '/'
    | '/panal'
    | '/(auth)/GoogleSuccess'
    | '/(auth)/Login'
    | '/(auth)/SignUp'
    | '/trip/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PanalRoute: typeof PanalRoute
  authGoogleSuccessRoute: typeof authGoogleSuccessRoute
  authLoginRoute: typeof authLoginRoute
  authSignUpRoute: typeof authSignUpRoute
  TripIdIndexRoute: typeof TripIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/panal': {
      id: '/panal'
      path: '/panal'
      fullPath: '/panal'
      preLoaderRoute: typeof PanalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/SignUp': {
      id: '/(auth)/SignUp'
      path: '/SignUp'
      fullPath: '/SignUp'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/Login': {
      id: '/(auth)/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/GoogleSuccess': {
      id: '/(auth)/GoogleSuccess'
      path: '/GoogleSuccess'
      fullPath: '/GoogleSuccess'
      preLoaderRoute: typeof authGoogleSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trip/$id/': {
      id: '/trip/$id/'
      path: '/trip/$id'
      fullPath: '/trip/$id'
      preLoaderRoute: typeof TripIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PanalRoute: PanalRoute,
  authGoogleSuccessRoute: authGoogleSuccessRoute,
  authLoginRoute: authLoginRoute,
  authSignUpRoute: authSignUpRoute,
  TripIdIndexRoute: TripIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
